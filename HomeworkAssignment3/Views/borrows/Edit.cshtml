@model HomeworkAssignment3.Models.Borrow

@{
    ViewBag.Title = "Edit Borrow";
}

<h2>Edit Borrow</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Borrow</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.BorrowId) <!-- Correct casing for property name -->
        <!-- Student Dropdown -->
        <div class="form-group">
            @Html.LabelFor(model => model.StudentId, "Student", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("StudentId",
                    ViewBag.Students != null ? new SelectList(ViewBag.Students, "StudentId", "Name", Model.StudentId) : null,
                    "Select Student",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StudentId, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Book Dropdown -->
        <div class="form-group">
            @Html.LabelFor(model => model.BookId, "Book", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("BookId",
                    ViewBag.Books != null ? new SelectList(ViewBag.Books, "BookId", "Name", Model.BookId) : null,
                    "Select Book",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BookId, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Taken Date Field -->
        <div class="form-group">
            @Html.LabelFor(model => model.TakenDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TakenDate, new { htmlAttributes = new { @class = "form-control", type = "date" } }) <!-- Set type to date for better UX -->
                @Html.ValidationMessageFor(model => model.TakenDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Brought Date Field -->
        <div class="form-group">
            @Html.LabelFor(model => model.BroughtDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BroughtDate, new { htmlAttributes = new { @class = "form-control", type = "date" } }) <!-- Set type to date for better UX -->
                @Html.ValidationMessageFor(model => model.BroughtDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Save Button -->
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" /> <!-- Prominent Save button -->
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" }) <!-- Styled Back to List link -->
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
